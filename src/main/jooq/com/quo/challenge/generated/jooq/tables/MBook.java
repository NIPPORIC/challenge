/*
 * This file is generated by jOOQ.
 */
package com.quo.challenge.generated.jooq.tables;


import com.quo.challenge.generated.jooq.Indexes;
import com.quo.challenge.generated.jooq.Keys;
import com.quo.challenge.generated.jooq.Public;
import com.quo.challenge.generated.jooq.tables.records.MBookRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MBook extends TableImpl<MBookRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.m_book</code>
     */
    public static final MBook M_BOOK = new MBook();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MBookRecord> getRecordType() {
        return MBookRecord.class;
    }

    /**
     * The column <code>public.m_book.book_id</code>. 書籍ID
     */
    public final TableField<MBookRecord, Integer> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "書籍ID");

    /**
     * The column <code>public.m_book.name</code>. 書籍名
     */
    public final TableField<MBookRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "書籍名");

    /**
     * The column <code>public.m_book.author</code>. 著者名
     */
    public final TableField<MBookRecord, String> AUTHOR = createField(DSL.name("author"), SQLDataType.CLOB.nullable(false), this, "著者名");

    /**
     * The column <code>public.m_book.create_date</code>. 作成日
     */
    public final TableField<MBookRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "作成日");

    /**
     * The column <code>public.m_book.update_date</code>. 更新日
     */
    public final TableField<MBookRecord, LocalDateTime> UPDATE_DATE = createField(DSL.name("update_date"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "更新日");

    /**
     * The column <code>public.m_book.update_count</code>. 更新回数
     */
    public final TableField<MBookRecord, Integer> UPDATE_COUNT = createField(DSL.name("update_count"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "更新回数");

    private MBook(Name alias, Table<MBookRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MBook(Name alias, Table<MBookRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.m_book</code> table reference
     */
    public MBook(String alias) {
        this(DSL.name(alias), M_BOOK);
    }

    /**
     * Create an aliased <code>public.m_book</code> table reference
     */
    public MBook(Name alias) {
        this(alias, M_BOOK);
    }

    /**
     * Create a <code>public.m_book</code> table reference
     */
    public MBook() {
        this(DSL.name("m_book"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.M_BOOK_NAME_AUTHOR_IDX);
    }

    @Override
    public Identity<MBookRecord, Integer> getIdentity() {
        return (Identity<MBookRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MBookRecord> getPrimaryKey() {
        return Keys.M_BOOK_PKEY;
    }

    @Override
    public MBook as(String alias) {
        return new MBook(DSL.name(alias), this);
    }

    @Override
    public MBook as(Name alias) {
        return new MBook(alias, this);
    }

    @Override
    public MBook as(Table<?> alias) {
        return new MBook(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MBook rename(String name) {
        return new MBook(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MBook rename(Name name) {
        return new MBook(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MBook rename(Table<?> name) {
        return new MBook(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MBook where(Condition condition) {
        return new MBook(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MBook where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MBook where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MBook where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MBook where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MBook where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MBook where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MBook where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MBook whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MBook whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
